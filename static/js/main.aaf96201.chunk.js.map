{"version":3,"sources":["container/MainContainer/index.js","components/styled/PageHeader.js","components/styled/PageBox.js","container/Lv1React/index.js","container/Lv2JSX/Hello.js","container/Lv2JSX/Lv2JSX.js","components/TransMd/CodeBlock.js","components/TransMd/Renderer.js","components/TransMd/index.js","components/AutoTab/AutoTab.js","container/Lv2JSX/index.js","container/Lv2JSX/Sources.js","container/Lv3Component/index.js","container/MobX/Counter.js","container/MobX/MobX.js","container/MobX/stores/counter.js","container/MobX/index.js","container/MobX/Sources.js","container/Lv4LifeCycle/LifeCycleSample.js","container/Lv4LifeCycle/ErrorBoundary.js","container/Lv4LifeCycle/Lv4LifeCycle.js","container/Lv4LifeCycle/index.js","container/Lv4LifeCycle/Sources.js","container/MaterialUi/MaterialButton.js","container/MaterialUi/MaterialTable.js","container/MaterialUi/MaterialUi.js","container/MaterialUi/index.js","container/MaterialUi/Sources.js","App.js","serviceWorker.js","index.js"],"names":["index","HeaderContents","styled","span","PageHeader","props","Text","style","display","justifyContent","MainBox","div","ContentsBox","children","Box","CodeBox","MdBox","padding","width","className","paddingTop","Hello","Lv2JSX","backgroundColor","color","fontSize","SyntaxHighlighter","registerLanguage","jsx","CodeBlock","this","language","value","duotoneDark","PureComponent","defaultProps","InlineCodeBlock","background","BlockQuoteBlock","border","borderRadius","paddingLeft","margin","TableCellBlock","textAlign","align","isHeader","borderLeft","borderRight","borderBottom","ReactMarkdown","require","contents","height","overflow","source","skipHtml","escapeHtml","renderers","code","tableCell","inlineCode","blockquote","paddingBottom","AutoTab","menu","customStyle","customTab","defaultIndex","startTabIndex","map","list","key","TransMd","Counter","inject","stores","number","counter","increase","decrease","observer","onClick","Component","observable","action","MobX","LifeCycleSample","state","myRef","handleClick","setState","console","log","nextProps","nextState","prevProps","prevState","snapshot","ref","ErrorBoundary","error","info","Lv4LifeCycle","Math","floor","random","toString","MaterialButton","Button","variant","customers","Row","TableRow","TableCell","id","src","image","alt","name","birthday","gender","job","MaterialTable","classes","Paper","root","Table","table","TableHead","TableBody","c","withStyles","theme","marginTop","spacing","unit","overflowX","minWidth","MaterialUi","App","MainContainer","Lv3Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aaf96201.chunk.js","sourcesContent":["import React from 'react';\n\nconst index = () => {\n    return (\n        <div>\n           <h1>React.js Skill Book</h1>\n        </div>\n    );\n};\n\nexport default index;","import React from 'react';\nimport styled from 'styled-components';\n\nconst HeaderContents = styled.span`\n    border : 1px solid skyblue;\n    background : skyblue;\n    color : white;\n    border-radius : 10px;\n    font-size : 25px;\n    font-weight : bold;\n    margin-top : 15px;\n    padding : 2px 20px;\n`\n\nconst PageHeader = (props) => {\n    const { Text } = props;\n\n    return (\n        <div style={{display : 'flex', justifyContent : 'center', }}>\n            <HeaderContents>{Text}</HeaderContents>\n        </div>\n    );\n};\n\nexport default PageHeader;","import React from 'react';\nimport styled from 'styled-components';\nimport PageHeader from './PageHeader';\n\nconst MainBox = styled.div`\n    display : inline-flex;\n    width : 100%;\n    border : 1px dashed red;\n    margin : 5px;\n    background : #EEEEEE;\n`\n\nconst ContentsBox = ({children}) => {\n    const Box = styled.div`\n        width : 33%;\n        padding : 5px;\n        display : flex;\n        flex-direction: column;\n    `\n    return (\n        <Box>\n            <PageHeader Text='Pages'/>\n            {children}\n        </Box>\n    )\n}\n\nconst CodeBox = ({children}) => {\n    const Box = styled.div`\n        width : 33%;\n        padding : 5px;\n        border-left : 1px dashed red;\n        border-right : 1px dashed red;\n        display : flex;\n        flex-direction: column;\n    `\n    return (\n        <Box>\n            <PageHeader Text='Code'/>\n            {children}\n        </Box>\n    )\n}\n\nconst MdBox = ({children}) => {\n    const Box = styled.div`\n        width : 33%;\n        padding : 5px;\n        display : flex;\n        flex-direction: column;\n    `\n    return (\n        <Box>\n            <PageHeader Text='MarkDown'/>\n            {children}\n        </Box>\n    )\n}\n\nexport { MainBox, ContentsBox, CodeBox, MdBox };","import React from 'react';\nimport './Lv1React.css';\nimport { MainBox } from '../../components/styled';\n\nconst index = () => {\n    return (\n        <MainBox>\n            <div style={{padding:'5px'}}>\n                <h2>Lv1. React</h2>\n\n                <h3>React란?</h3>\n                <p style={{width : '400px'}}>\n                    리액트는 페이스북에서 제공해주는 프론트엔드 라이브러리이다. \n                    리액트는 컴포넌트 기반으로 되어있어, 컴포넌트에 데이터를 주면 개발자가 설계한대로 UI가 설계되어 사용자에게 보여진다.\n                </p>\n\n                <h3>작업 환경</h3>\n                <table className='Lv1-table'>\n                    <tbody>\n                        <tr>\n                            <th>설치</th>\n                            <th>버전</th>\n                            <th>기타</th>\n                        </tr>\n                        <tr>\n                            <td>node.js</td>\n                            <td>12.13.0</td>\n                            <td></td>\n                        </tr>\n                        <tr>\n                            <td>npm</td>\n                            <td>5.6.0</td>\n                            <td></td>\n                        </tr>\n                        <tr>\n                            <td>Visual Studio Code</td>\n                            <td>latest</td>\n                            <td>확장 프로그램 설치</td>\n                        </tr>\n                    </tbody>\n                </table>\n\n                <span style={{paddingTop : '10px'}}>VS code 확장프로그램</span>\n                <ol>\n                    <li>ESLint : 자바스크립트 문법 및 코드 스타일을 검사해주는 도구.</li>\n                    <li>Reactjs Code Snippets : 리액트 컴포넌트 및 라이프사이클 함수를 작성할 때 단축 단어 사용.</li>\n                    <li>Prettier-Code formatter : 코드 스타일을 자동으로 정리해주는 도구.</li>\n                </ol>\n            </div>\n        </MainBox>\n    );\n};\n\nexport default index;","import React from 'react';\n\nfunction Hello() {\n    return <div>안녕하세요!</div>;\n}\n\nexport default Hello;","import React from 'react';\nimport Hello from './Hello';\nimport '../../App.css';\n\nconst Lv2JSX = () => {\n    const name = 'react';\n    const style = {\n        backgroundColor : 'black',\n        color : 'aqua',\n        fontSize : 24,\n        padding : '1rem'\n    }\n\n    return (\n        <div>\n            <h2>Lv2. JSX</h2>\n            <Hello \n                // 이런 식의 작성하는 주석문\n            />\n            <div style={style}>{name}</div>\n            <div className=\"gray-box\">gray-box</div>\n            {/* 어쩌고 저쩌고 */}\n        </div>\n    );\n}\n\nexport default Lv2JSX;","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx';\nimport { duotoneDark } from \"react-syntax-highlighter/dist/cjs/styles/prism\";\n\nSyntaxHighlighter.registerLanguage('jsx', jsx);\n\nclass CodeBlock extends PureComponent {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    language: PropTypes.string\n  };\n\n  static defaultProps = {\n    language: null\n  };\n\n  render() {\n    const { language, value } = this.props;\n    return (\n      <SyntaxHighlighter language={language} style={duotoneDark}>\n        {value}\n      </SyntaxHighlighter>\n    );\n  }\n}\n\nexport default CodeBlock;\n\n// npmjs.com/package/react-syntax-highlighter","import React from 'react';\nimport CodeBlock from './CodeBlock';\n\nfunction InlineCodeBlock(props) {\n    return (\n        <span style={{ background : '#ff0'}}>\n            {props.value}\n        </span>\n    )\n}\n\nfunction BlockQuoteBlock(props) {\n    return (\n        <div style={{border : '1px dashed #aaa', borderRadius : 10, paddingLeft : 10, margin : 5}}>\n            {props.children}\n        </div>\n    );\n}\n\n// function CodeBlock(props) {\n//     return (\n//         <pre style={{background:'#000', color : '#fff', padding : 10}}>\n//             <code>\n//                 {props.value}\n//             </code>\n//         </pre>\n//     )\n// }\n\nfunction TableCellBlock(props) {\n    let style = {\n        textAlign : props.align ? props.align : 'center',\n        padding : 5\n    }\n\n    if (props.isHeader) {\n        style.background = '#ff0';\n        style.border = '1px solid #ccc';\n        style.borderLeft = 0;\n        style.borderRight = 0;\n    } else {\n        style.borderBottom = '1px solid #eee';\n    }\n\n    return (\n        <td style={style}>\n            {props.children}\n        </td>\n    )\n}\n\nexport { InlineCodeBlock, BlockQuoteBlock, CodeBlock, TableCellBlock } ;","import React from 'react';\nimport { InlineCodeBlock, CodeBlock, TableCellBlock, BlockQuoteBlock } from './Renderer';\n\nconst ReactMarkdown = require('react-markdown');\n\nconst index = (props) => {\n    const { contents } = props;\n    \n    return (\n        <div style={{width: 'auto', height : '600px', overflow:'scroll'}}>\n            <ReactMarkdown\n                source={contents && contents}\n                skipHtml={false}\n                escapeHtml={false}\n                renderers={{\n                    code : CodeBlock,\n                    tableCell : TableCellBlock,\n                    inlineCode : InlineCodeBlock,\n                    blockquote : BlockQuoteBlock\n                }}\n                />\n        </div>\n    );\n};\n\nexport default index;\n\n\n// https://medium.com/young-developer/react-markdown-code-and-syntax-highlighting-632d2f9b4ada","/*\n*   props.menu is Tab Name. (String)\n*   props.contents is Tab Contents (Component)\n*   \n*   made by Copotter\n*/\n\nimport React from 'react';\nimport { Tabs, Tab, TabList, TabPanel } from 'react-tabs';\nimport './Tab.css';\nimport \"react-tabs/style/react-tabs.css\";\n\nconst style={\n    paddingBottom:\"10px\",\n}\n\nconst AutoTab = (props) => {\n\tconst {menu, contents,customStyle,customTab} = props\n\n\treturn(\n        <Tabs \n         style={customStyle!=null?customStyle:style}\n         defaultIndex={props.startTabIndex ? props.startTabIndex : 0}>\n            <TabList>\n    \t\t{menu.map((list, index) => (\n\t    \t\t    <Tab style={customTab!=null?customTab:{}} key={index}>{list}</Tab>\t\n\t    \t))}\n            </TabList>\n            {contents.map((list, index) => (\n                <TabPanel key={index}>{list}</TabPanel>\n            ))}\n        </Tabs>\n\t)\n}\n\nexport const AutoTab_Testmenu = [\"first_tab\",\"second_tab\"];\nexport const AutoTab_Testcontents = [\"first_page\", \"second_page\"];\n\n\nexport default AutoTab;","import React from 'react';\nimport Lv2JSX from './Lv2JSX';\nimport TransMd from '../../components/TransMd';\nimport { MainBox, ContentsBox, CodeBox, MdBox } from '../../components/styled';\nimport { Lv2JSXJS, HelloJS, markdown} from './Sources';\nimport AutoTab from '../../components/AutoTab/AutoTab';\n\nconst index = () => {\n    return (\n        <MainBox>\n            <ContentsBox><Lv2JSX /></ContentsBox>\n            <CodeBox>\n                <AutoTab\n                    menu={['Lv2JSX.js','Hello.js']}\n                    contents={[\n                        <TransMd contents={Lv2JSXJS} />,\n                        <TransMd contents={HelloJS} />\n                    ]}\n                />\n            </CodeBox>\n            <MdBox><TransMd contents={markdown}/></MdBox>\n        </MainBox>\n    );\n}\n\nexport default index;","const Lv2JSXJS = `\n\\`\\`\\`jsx\nimport React from 'react';\nimport Hello from './Hello';\nimport '../../App.css';\n\nconst Lv2JSX = () => {\n    const name = 'react';\n    const style = {\n        backgroundColor : 'black',\n        color : 'aqua',\n        fontSize : 24,\n        padding : '1rem'\n    }\n\n    return (\n        <div>\n            <h2>Lv2. JSX</h2>\n            <Hello \n                // 이런 식의 작성하는 주석문\n            />\n            <div style={style}>{name}</div>\n            <div className=\"gray-box\">gray-box</div>\n            {/* 어쩌고 저쩌고 */}\n        </div>\n    );\n}\n\nexport default Lv2JSX;\n\\`\\`\\`\n`\n\nconst HelloJS = `\n\\`\\`\\`jsx\nimport React from 'react';\n\nfunction Hello() {\n    return <div>안녕하세요!</div>;\n}\n\nexport default Hello;\n\\`\\`\\`\n`\n\nconst markdown = `\n\n# JSX\n\n## 규칙\n<ol>\n\n1. 태그는 꼭 닫혀있어야 한다.\n    ( Self Closing Tag 가능 )\n    \\`\\`\\`html\n    <div>태그 닫기</div>\n    <Hello />\n    \\`\\`\\`\n\n2. 두 개 이상의 태그는 하나의 태그로 감싸져야 한다.\n    ( FlagMent (<></>)를 사용하면 편리함 )\n    \\`\\`\\`javascript\n    <>\n        <div>두개 이상의</div>\n        <p>태그는 하나로 감싸야한다.</p>\n    </>\n    \\`\\`\\`\n\n3. JSX에서 변수를 표현할 때, {변수명} 으로 표현한다.\n    \\`\\`\\`javascript\n    const name = '이렇게';\n    return <div>JavaScript 값 : {name} </div>\n    \\`\\`\\`\n\n4. style을 줄 때, 객체로 카멜표기법 사용.\n\n5. JSX에서 class는 className=\"클래스명\" 으로 표현한다.\n\n    \\`\\`\\`javascript\n    const style = {\n        background : 'gray',\n    }\n    return (\n        <div style={style}>\n            <div className=\"my-style\">\n                style과 className\n            </div>\n        </div>\n    )\n    \\`\\`\\`\n\n6. 주석은 {/* ~~~ */} 으로 표현한다.\n    \\`\\`\\`javascript\n    return (\n        <div>\n            {/* 주석주석 */}\n            <input\n                // 이렇게도 주석\n            />\n        </div>\n    )\n    \\`\\`\\`\n\n</ol>\n\n`\n\nexport { Lv2JSXJS, HelloJS, markdown };","import React from 'react';\nimport TransMd from '../../components/TransMd';\nimport { MainBox, ContentsBox, CodeBox, MdBox } from '../../components/styled';\n\nconst contents = `\n\n*준비중...*\n`;\n\nconst index = () => {\n    return (\n        <MainBox>\n            <ContentsBox>\n                <h2>Lv3. Component</h2>\n\n                <h3>class Component</h3>\n\n                <h3>functional Component</h3>\n\n            </ContentsBox>\n            <CodeBox><TransMd contents={contents}/></CodeBox>\n            <MdBox><TransMd contents={contents}/></MdBox>\n        </MainBox>\n    );\n};\n\nexport default index;","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\n\n// **** 함수형태로 파라미터를 전달해주면 특정 값만 받아올 수 있음.\n@inject(stores => ({\n  number: stores.counter.number,\n  increase: stores.counter.increase,\n  decrease: stores.counter.decrease,\n}))\n\n@observer\nclass Counter extends Component {\n  render() {\n    const { number, increase, decrease } = this.props;\n    return (\n      <div>\n        <h1>{number}</h1>\n        <button onClick={increase}>+1</button>\n        <button onClick={decrease}>-1</button>\n      </div>\n    );\n  }\n}\n\nexport default Counter;","import React from 'react';\nimport Counter from './Counter';\nimport { Provider } from 'mobx-react'; // MobX 에서 사용하는 Provider\nimport CounterStore from './stores/counter'; // 방금 만든 스토어 불러와줍니다.\n\nconst counter = new CounterStore(); // 스토어 인스턴스 생성\n\nconst index = () => {\n    return (\n        <Provider counter={counter}>\n        {/* Provider 에 props 로 넣어줍니다. */}\n            <div>\n                <Counter /> \n            </div>\n        </Provider>\n    );\n};\n\nexport default index;","import { observable, action } from 'mobx';\n\nexport default class CounterStore {\n    @observable number = 0;\n\n    @action increase = () => {\n        this.number++;\n    }\n\n    @action decrease = () => {\n        this.number--;\n    }\n}","import React from 'react';\nimport { MainBox, ContentsBox, CodeBox, MdBox } from '../../components/styled';\nimport MobX from './MobX';\nimport TransMd from '../../components/TransMd';\nimport { markdown, MobxJS, CounterJS, counterJS } from './Sources';\nimport AutoTab from '../../components/AutoTab/AutoTab';\n\nconst index = () => {\n    return (\n        <MainBox>\n            <ContentsBox>\n                <h2>MobX</h2>\n                <MobX />\n            </ContentsBox>\n            <CodeBox>\n                <AutoTab\n                    menu={['MobX.js','Counter.js','counter.js']}\n                    contents={[\n                        <TransMd contents={MobxJS} />,\n                        <TransMd contents={CounterJS} />,\n                        <TransMd contents={counterJS} />,\n                    ]}\n                />\n            </CodeBox>\n            <MdBox><TransMd contents={markdown}/></MdBox>\n        </MainBox>\n    );\n};\n\nexport default index;","const MobxJS = `\n\\`\\`\\`jsx\nimport React from 'react';\nimport Counter from './Counter';\nimport { Provider } from 'mobx-react'; // MobX 에서 사용하는 Provider\nimport CounterStore from './stores/counter'; // 방금 만든 스토어 불러와줍니다.\n\nconst counter = new CounterStore(); // 스토어 인스턴스 생성\n\nconst index = () => {\n    return (\n        <Provider counter={counter}>\n        {/* Provider 에 props 로 넣어줍니다. */}\n            <div>\n                <Counter /> \n            </div>\n        </Provider>\n    );\n};\n\nexport default index;\n\\`\\`\\`\n`\n\nconst CounterJS = `\n\\`\\`\\`jsx\nimport React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\n\n// **** 함수형태로 파라미터를 전달해주면 특정 값만 받아올 수 있음.\n@inject(stores => ({\n  number: stores.counter.number,\n  increase: stores.counter.increase,\n  decrease: stores.counter.decrease,\n}))\n\n@observer\nclass Counter extends Component {\n  render() {\n    const { number, increase, decrease } = this.props;\n    return (\n      <div>\n        <h1>{number}</h1>\n        <button onClick={increase}>+1</button>\n        <button onClick={decrease}>-1</button>\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n\\`\\`\\`\n`\n\nconst counterJS = `\n\\`\\`\\`jsx\nimport { observable, action } from 'mobx';\n\nexport default class CounterStore {\n    @observable number = 0;\n\n    @action increase = () => {\n        this.number++;\n    }\n\n    @action decrease = () => {\n        this.number--;\n    }\n}\n\\`\\`\\`\n`\n\nconst markdown = `\n\n# MobX\n- 상태 관리 라이브러리.\n\n## mobx-react\n\n- react에서 MobX를 decorator로 사용하려면, babel를 커스텀해야한다.\n- babel를 커스텀하려면 eject를 해야함.\n\\`\\`\\`node\nnpm run eject // yarn eject\n\\`\\`\\`\n\n- package.json 수정\n- 수정이 완료되면 서버를 재시작한다.\n\\`\\`\\`json\n\"babel\": {\n    \"presets\": [\n      \"react-app\"\n    ],\n    \"plugins\": [\n        [\"@babel/plugin-proposal-decorators\", { \"legacy\": true}],\n        [\"@babel/plugin-proposal-class-properties\", { \"loose\": true}]\n    ]\n  }\n\\`\\`\\`\n\n\n## Mobx Store\n- redux와 같은 개념으로 Store가 존재한다.\n- 하나의 스토어만 존재하는 redux와 달리, 여러 개의 스토어가 존재할 수 있다.\n\n    **참조 파일 : stores/counter.js**\n\n- Provide를 사용하여 컨테이너에 스토어를 적용한다.\n- injectfh 컴포넌트에 스토어에 주입한다.\n\n    **inject는 mobx-react의 함수로, 컴포넌트에서 스토어에 접근할 수 있게 해줌.**\n    **( 스토어의 값을 컴포넌트의 props로 전달 )**\n\n    **참조 파일 : src/Counter.js**\n`\n\nexport { MobxJS, CounterJS, counterJS, markdown } ;","import React, { Component } from 'react';\n\nclass LifeCycleSample extends Component {\n    state = {\n        number : 0,\n        color : null,\n    }\n\n    myRef = null; // ref를 설정할 부분\n    \n    constructor(props) {\n        super(props);\n        console.log('constructor');\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        console.log('getDerivedStateFromProps');\n        if(nextProps.color !== prevState.color) {\n            return { color : nextProps.color };\n        }\n        return null;\n    }\n\n    componentDidMount() {\n        console.log('componentDidMount');\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log('shouldComponentUpdate : ', nextProps, nextState);\n\n        // 숫자의 마지막 자리가 4면 리렌더링되지 않는다.\n        return nextState.number % 10 !== 4;\n    }\n\n    componentWillUnmount() {\n        console.log('componentWillUnmount');\n    }\n\n    handleClick = () => {\n        this.setState({\n            number : this.state.number + 1\n        });\n    }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        console.log('getSnapshotBeforeUpdate');\n        if(prevProps.color !== this.props.color) {\n            return this.myRef.style.color;\n        }\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        console.log('componentDidUpdate', prevProps, prevState);\n        if(snapshot) {\n            console.log('업데이트되기 직전 색상 : ' , snapshot);\n        }\n    }\n\n    render() {\n        console.log('render');\n\n        const style = {\n            color : this.props.color\n        };\n\n        return (\n            <div>\n                {/* {this.props.missing.value} */}\n                <h1 style={style} ref={ref => this.myRef=ref}>\n                    {this.state.number}\n                </h1>\n                <p>color : {this.state.color}</p>\n                <button onClick={this.handleClick}>\n                    더하기\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default LifeCycleSample;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    state = {\n        error : false\n    };\n\n    componentDidCatch(error, info) {\n        this.setState({\n            error : true\n        });\n        console.log('componentDidCatch :', {error, info});\n    }\n\n    render() {\n        if(this.state.error) return <div>에러가 발생했습니다!</div>;\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport LifeCycleSample from './LifeCycleSample';\nimport ErrorBoundary from './ErrorBoundary';\n\nfunction getRandomColor() {\n    return '#' + Math.floor(Math.random() * 16777215).toString(16);\n}\n\nclass Lv4LifeCycle extends Component {\n    state = {\n        color : '#000000',\n    }\n\n    handleClick = () => {\n        this.setState({\n            color : getRandomColor()\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.handleClick}>랜덤 색상</button>\n                <ErrorBoundary>\n\n                <LifeCycleSample color={this.state.color}/>\n                </ErrorBoundary>\n            </div>\n        );\n    }\n}\n\nexport default Lv4LifeCycle;","import React from 'react';\nimport { MainBox, ContentsBox, CodeBox, MdBox } from '../../components/styled';\nimport TransMd from '../../components/TransMd';\nimport { markdown, LifeCycleJS, LifeCycleSampleJS, ErrorBoundaryJS } from './Sources';\nimport AutoTab from '../../components/AutoTab/AutoTab';\nimport Lv4LifeCycle from './Lv4LifeCycle';\n\nconst index = () => {\n    return (\n        <MainBox>\n            <ContentsBox>\n                <h2>Lv4.LifeCycle</h2>\n                <Lv4LifeCycle />\n            </ContentsBox>\n            <CodeBox>\n                <AutoTab\n                    menu={['LifeCycle.js','LifeCycleSample.js','ErrorBoundary.js']}\n                    contents={[\n                        <TransMd contents={LifeCycleJS} />,\n                        <TransMd contents={LifeCycleSampleJS} />,\n                        <TransMd contents={ErrorBoundaryJS} />,\n                    ]}\n                />\n            </CodeBox>\n            <MdBox><TransMd contents={markdown}/></MdBox>\n        </MainBox>\n    );\n};\n\nexport default index;","const LifeCycleJS = `\n\\`\\`\\`jsx\nimport React, { Component } from 'react';\nimport LifeCycleSample from './LifeCycleSample';\nimport ErrorBoundary from './ErrorBoundary';\n\nfunction getRandomColor() {\n    return '#' + Math.floor(Math.random() * 16777215).toString(16);\n}\n\nclass Lv4LifeCycle extends Component {\n    state = {\n        color : '#000000',\n    }\n\n    handleClick = () => {\n        this.setState({\n            color : getRandomColor()\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.handleClick}>랜덤 색상</button>\n                <ErrorBoundary>\n                    <LifeCycleSample color={this.state.color}/>\n                </ErrorBoundary>\n            </div>\n        );\n    }\n}\n\nexport default Lv4LifeCycle;\n\\`\\`\\`\n`\n\nconst LifeCycleSampleJS = `\n\\`\\`\\`jsx\nimport React, { Component } from 'react';\n\nclass LifeCycleSample extends Component {\n    state = {\n        number : 0,\n        color : null,\n    }\n\n    myRef = null; // ref를 설정할 부분\n    \n    constructor(props) {\n        super(props);\n        console.log('constructor');\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        console.log('getDerivedStateFromProps');\n        if(nextProps.color !== prevState.color) {\n            return { color : nextProps.color };\n        }\n        return null;\n    }\n\n    componentDidMount() {\n        console.log('componentDidMount');\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log('shouldComponentUpdate : ', nextProps, nextState);\n\n        // 숫자의 마지막 자리가 4면 리렌더링되지 않는다.\n        return nextState.number % 10 !== 4;\n    }\n\n    componentWillUnmount() {\n        console.log('componentWillUnmount');\n    }\n\n    handleClick = () => {\n        this.setState({\n            number : this.state.number + 1\n        });\n    }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        console.log('getSnapshotBeforeUpdate');\n        if(prevProps.color !== this.props.color) {\n            return this.myRef.style.color;\n        }\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        console.log('componentDidUpdate', prevProps, prevState);\n        if(snapshot) {\n            console.log('업데이트되기 직전 색상 : ' , snapshot);\n        }\n    }\n\n    render() {\n        console.log('render');\n\n        const style = {\n            color : this.props.color\n        };\n\n        return (\n            <div>\n                {/* {this.props.missing.value} */}\n                <h1 style={style} ref={ref => this.myRef=ref}>\n                    {this.state.number}\n                </h1>\n                <p>color : {this.state.color}</p>\n                <button onClick={this.handleClick}>\n                    더하기\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default LifeCycleSample;\n\\`\\`\\`\n`\n\nconst ErrorBoundaryJS = `\n\\`\\`\\`jsx\nimport React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    state = {\n        error : false\n    };\n\n    componentDidCatch(error, info) {\n        this.setState({\n            error : true\n        });\n        console.log('componentDidCatch :', {error, info});\n    }\n\n    render() {\n        if(this.state.error) return <div>에러가 발생했습니다!</div>;\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n\\`\\`\\`\n`\n\nconst markdown = `\n\n# MobX\n- 상태 관리 라이브러리.\n\n## mobx-react\n\n- react에서 MobX를 decorator로 사용하려면, babel를 커스텀해야한다.\n- babel를 커스텀하려면 eject를 해야함.\n\\`\\`\\`node\nnpm run eject // yarn eject\n\\`\\`\\`\n\n- package.json 수정\n- 수정이 완료되면 서버를 재시작한다.\n\\`\\`\\`json\n\"babel\": {\n    \"presets\": [\n      \"react-app\"\n    ],\n    \"plugins\": [\n        [\"@babel/plugin-proposal-decorators\", { \"legacy\": true}],\n        [\"@babel/plugin-proposal-class-properties\", { \"loose\": true}]\n    ]\n  }\n\\`\\`\\`\n\n\n## Mobx Store\n- redux와 같은 개념으로 Store가 존재한다.\n- 하나의 스토어만 존재하는 redux와 달리, 여러 개의 스토어가 존재할 수 있다.\n\n    **참조 파일 : stores/counter.js**\n\n- Provide를 사용하여 컨테이너에 스토어를 적용한다.\n- injectfh 컴포넌트에 스토어에 주입한다.\n\n    **inject는 mobx-react의 함수로, 컴포넌트에서 스토어에 접근할 수 있게 해줌.**\n    **( 스토어의 값을 컴포넌트의 props로 전달 )**\n\n    **참조 파일 : src/Counter.js**\n`\n\nexport { LifeCycleJS, LifeCycleSampleJS, ErrorBoundaryJS, markdown } ;","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nconst MaterialButton = () => {\n    return (\n        <Button variant=\"contained\" color=\"primary\">\n        Hello World\n        </Button>\n    );\n};\n\nexport default MaterialButton;","import React, { Component } from 'react';\n\n// material-ui-components\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport { withStyles } from '@material-ui/core/styles';\n\n// withStyles 값 정의\nconst styles = theme => ({\nroot: {\nwidth: \"100%\",\nmarginTop: theme.spacing.unit * 3,\noverflowX: \"auto\"\n},\ntable: {\nminWidth: 1080\n}\n});\n\nconst customers = [\n    {\n    'id': 1,\n    'image': 'https://placeimg.com/64/64/1',\n    'name': '홍길동',\n    'birthday': '961222',\n    'gender': '남자',\n    'job': '대학생'\n    },\n    {\n    'id': 2,\n    'image': 'https://placeimg.com/64/64/2',\n    'name': '나동빈',\n    'birthday': '960508',\n    'gender': '남자',\n    'job': '프로그래머'\n    },\n    {\n    'id': 3,\n    'image': 'https://placeimg.com/64/64/3',\n    'name': '이순신',\n    'birthday': '961127',\n    'gender': '남자',\n    'job': '디자이너'\n    }\n]\n\nconst Row = (props) => {\n    return (\n        <TableRow>\n            <TableCell>{props.id}</TableCell>\n            <TableCell><img src={props.image} alt=\"profile\"/></TableCell>\n            <TableCell>{props.name}</TableCell>\n            <TableCell>{props.birthday}</TableCell>\n            <TableCell>{props.gender}</TableCell>\n            <TableCell>{props.job}</TableCell>\n        </TableRow>\n    )\n}\n\nclass MaterialTable extends Component {\n    render() {\n        const { classes } = this.props;\n        return (\n            <Paper className={classes.root}>\n                <Table className={classes.table}>\n                    <TableHead>\n                        <TableRow>\n                        <TableCell>번호</TableCell>\n                        <TableCell>이미지</TableCell>\n                        <TableCell>이름</TableCell>\n                        <TableCell>생년월일</TableCell>\n                        <TableCell>성별</TableCell>\n                        <TableCell>직업</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {customers.map(c => {\n                        return <Row key={c.id} id={c.id} image={c.image} name={c.name} birthday={c.birthday} gender={c.gender} job={c.job} />\n                        })}\n                    </TableBody>\n                </Table>\n            </Paper>\n        );\n    }\n}\n\n// withStyles 주입\nexport default withStyles(styles)(MaterialTable);","import React from 'react';\nimport MaterialButton from './MaterialButton';\nimport MaterialTable from './MaterialTable';\n\nconst MaterialUi = () => {\n    return (\n        <div>\n            <p>Button</p>\n            <MaterialButton />\n\n            <p>Table</p>\n            <MaterialTable />\n        </div>\n    );\n};\n\nexport default MaterialUi;","import React from 'react';\nimport { MainBox, ContentsBox, CodeBox, MdBox } from '../../components/styled';\nimport TransMd from '../../components/TransMd';\nimport { MaterialUiJS, MaterialButtonJS, MaterialTableJS, markdown } from './Sources';\nimport AutoTab from '../../components/AutoTab/AutoTab';\nimport MaterialUi from './MaterialUi';\n\nconst index = () => {\n    return (\n        <MainBox>\n            <ContentsBox>\n                <h2>material-ui</h2>\n                <MaterialUi />\n            </ContentsBox>\n            <CodeBox>\n                <AutoTab\n                    menu={['MaterialUi.js','MaterialButton.js','MaterialTable.js']}\n                    contents={[\n                        <TransMd contents={MaterialUiJS} />,\n                        <TransMd contents={MaterialButtonJS} />,\n                        <TransMd contents={MaterialTableJS} />,\n                    ]}\n                />\n            </CodeBox>\n            <MdBox><TransMd contents={markdown}/></MdBox>\n        </MainBox>\n    );\n};\n\nexport default index;","const MaterialUiJS = `\n\\`\\`\\`jsx\nimport React from 'react';\nimport MaterialButton from './MaterialButton';\nimport MaterialTable from './MaterialTable';\n\nconst MaterialUi = () => {\n    return (\n        <div>\n            <p>Button</p>\n            <MaterialButton />\n\n            <p>Table</p>\n            <MaterialTable />\n        </div>\n    );\n};\n\nexport default MaterialUi;\n\\`\\`\\`\n`\n\nconst MaterialButtonJS = `\n\\`\\`\\`jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nconst MaterialButton = () => {\n    return (\n        <Button variant=\"contained\" color=\"primary\">\n        Hello World\n        </Button>\n    );\n};\n\nexport default MaterialButton;\n\\`\\`\\`\n`\n\nconst MaterialTableJS = `\n\\`\\`\\`jsx\nimport React, { Component } from 'react';\n\n// material-ui-components\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport { withStyles } from '@material-ui/core/styles';\n\n// withStyles 값 정의\nconst styles = theme => ({\nroot: {\nwidth: \"100%\",\nmarginTop: theme.spacing.unit * 3,\noverflowX: \"auto\"\n},\ntable: {\nminWidth: 1080\n}\n});\n\nconst customers = [\n    {\n    'id': 1,\n    'image': 'https://placeimg.com/64/64/1',\n    'name': '홍길동',\n    'birthday': '961222',\n    'gender': '남자',\n    'job': '대학생'\n    },\n    {\n    'id': 2,\n    'image': 'https://placeimg.com/64/64/2',\n    'name': '나동빈',\n    'birthday': '960508',\n    'gender': '남자',\n    'job': '프로그래머'\n    },\n    {\n    'id': 3,\n    'image': 'https://placeimg.com/64/64/3',\n    'name': '이순신',\n    'birthday': '961127',\n    'gender': '남자',\n    'job': '디자이너'\n    }\n]\n\nconst Row = (props) => {\n    return (\n        <TableRow>\n            <TableCell>{props.id}</TableCell>\n            <TableCell><img src={props.image} alt=\"profile\"/></TableCell>\n            <TableCell>{props.name}</TableCell>\n            <TableCell>{props.birthday}</TableCell>\n            <TableCell>{props.gender}</TableCell>\n            <TableCell>{props.job}</TableCell>\n        </TableRow>\n    )\n}\n\nclass MaterialTable extends Component {\n    render() {\n        const { classes } = this.props;\n        return (\n            <Paper className={classes.root}>\n                <Table className={classes.table}>\n                    <TableHead>\n                        <TableRow>\n                        <TableCell>번호</TableCell>\n                        <TableCell>이미지</TableCell>\n                        <TableCell>이름</TableCell>\n                        <TableCell>생년월일</TableCell>\n                        <TableCell>성별</TableCell>\n                        <TableCell>직업</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {customers.map(c => {\n                        return <Row key={c.id} id={c.id} image={c.image} name={c.name} birthday={c.birthday} gender={c.gender} job={c.job} />\n                        })}\n                    </TableBody>\n                </Table>\n            </Paper>\n        );\n    }\n}\n\n// withStyles 주입\nexport default withStyles(styles)(MaterialTable);\n\\`\\`\\`\n`\n\nconst markdown = `\n\n# Material-ui [참조](https://material-ui.com/getting-started/installation/)\n- Google Material기반의 스타일링 라이브러리\n\n## install\n\\`\\`\\`\n$ npm install @material-ui/core\n\\`\\`\\`\n\n## customStyle\n- withStyles 라이브러리를 사용하여, CSS를 적용할 수 있다.\n\n### 소스 예제\n\\`출처: https://ndb796.tistory.com/216 [안경잡이개발자]\\`\n\n`\n\nexport { MaterialUiJS, MaterialButtonJS, MaterialTableJS, markdown } ;","import React from 'react';\nimport MainContainer from './container/MainContainer';\nimport Lv1React  from './container/Lv1React';\nimport Lv2JSX  from './container/Lv2JSX';\nimport Lv3Component  from './container/Lv3Component';\nimport MobX  from './container/MobX';\nimport Lv4LifeCycle  from './container/Lv4LifeCycle';\nimport MaterialUi from './container/MaterialUi';\n\nfunction App() {\n  return (\n    <>\n      <MainContainer />\n      <Lv1React/>\n      <Lv2JSX />\n      <Lv3Component />\n      <MobX />\n      <Lv4LifeCycle />\n      <MaterialUi />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}